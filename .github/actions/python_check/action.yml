name: "Python Check"
description: "Runs checks (linting, formatting, type checking, tests) on the python code within the given folder"
inputs:
  folder:
    description: folder to check
    required: true
  skip-format-check:
    description: "Skip ruff format check"
    required: false
    default: "false"
  skip-type-check:
    description: "Skip mypy type check"
    required: false
    default: "false"
  skip-lint:
    description: "Skip ruff lint check"
    required: false
    default: "false"
  skip-test:
    description: "Skip pytest tests"
    required: false
    default: "false"
runs:
  using: "composite"
  steps:
    - uses: actions/setup-python@v5
      with:
        python-version-file: ${{ inputs.folder}}/.python-version
    - name: setup dependencies
      run: |
        pip install uv
        uv sync --all-groups
      working-directory: ${{inputs.folder}}
      shell: bash
    - name: lint
      if: inputs.skip-lint != 'true'
      run: uvx ruff check $FOLDER
      shell: bash
      env:
        FOLDER: ${{inputs.folder}}
    - name: format check
      if: inputs.skip-format-check != 'true'
      run: uvx ruff format --check $FOLDER
      shell: bash
      env:
        FOLDER: ${{inputs.folder}}
    - name: type check
      if: inputs.skip-type-check != 'true'
      run: uv run mypy .
      shell: bash
      env:
        FOLDER: ${{inputs.folder}}
      working-directory: ${{inputs.folder}}
    - name: test
      if: inputs.skip-test != 'true'
      id: test
      run: |
        set +e
        uv run pytest
        TEST_OUTPUT=$?
        # 5 = No Tests Run.  Ideally, this would be a failure, but we 
        # do have some projects with no tests, where it is still beneficial
        # to "run the tests", as that proves that the code can be run.
        if [[ TEST_OUTPUT -eq 5 ]]; then TEST_OUTPUT=0; fi
        exit $TEST_OUTPUT
      working-directory: ${{inputs.folder}}
      shell: bash
